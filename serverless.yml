service: my-app

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs14.x
  region: eu-west-1
  profile: test_user

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - !GetAtt UsersTable.Arn
            - !GetAtt BooksTable.Arn
            - !GetAtt AuthorsTable.Arn
        - Effect: Allow
          Action:
            - dynamodb:Query
          Resource:
            - Fn::Join:
                - '/'
                - - !GetAtt UsersTable.Arn
                  - 'index/*'
            - Fn::Join:
                - '/'
                - - !GetAtt BooksTable.Arn
                  - 'index/*'
            - Fn::Join:
                - '/'
                - - !GetAtt AuthorsTable.Arn
                  - 'index/*'
functions:
  usersFunction:
    handler: src/function/users/users.run
  booksFunction:
    handler: src/function/books/books.run
  authorsFunction:
    handler: src/function/authors/authors.run

custom:
  appSync:
    name: my-app
    authenticationType: API_KEY
    schema: src/schema/schema.graphql
    mappingTemplates:
      - dataSource: UsersLambda
        type: Query
        field: getUser
        request: "lambda-templates/users/getUser-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: UsersLambda
        type: Mutation
        field: createUser
        request: "lambda-templates/users/createUser-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: UsersLambda
        type: Mutation
        field: updateUser
        request: "lambda-templates/users/updateUser-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: UsersLambda
        type: Mutation
        field: deleteUser
        request: "lambda-templates/users/deleteUser-request.vtl"
        response: "lambda-templates/common/response.vtl"

      - dataSource: BooksLambda
        type: Query
        field: getBook
        request: "lambda-templates/books/getBook-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: BooksLambda
        type: Mutation
        field: createBook
        request: "lambda-templates/books/createBook-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: BooksLambda
        type: Mutation
        field: updateBook
        request: "lambda-templates/books/updateBook-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: BooksLambda
        type: Mutation
        field: deleteBook
        request: "lambda-templates/books/deleteBook-request.vtl"
        response: "lambda-templates/common/response.vtl"

      - dataSource: AuthorsLambda
        type: Query
        field: getAuthor
        request: "lambda-templates/authors/getAuthor-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: AuthorsLambda
        type: Mutation
        field: createAuthor
        request: "lambda-templates/authors/createAuthor-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: AuthorsLambda
        type: Mutation
        field: updateAuthor
        request: "lambda-templates/authors/updateAuthor-request.vtl"
        response: "lambda-templates/common/response.vtl"
      - dataSource: AuthorsLambda
        type: Mutation
        field: deleteAuthor
        request: "lambda-templates/authors/deleteAuthor-request.vtl"
        response: "lambda-templates/common/response.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: DEMO_DB
        config:
          tableName: !Ref UsersTable
          iamRoleStatements:
            - Effect: 'Allow'
              Action:
                - 'dynamodb:*'
              Resource:
                - Fn::GetAtt: [UsersTable, Arn]
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - Fn::Join:
                    - '/'
                    - - !GetAtt UsersTable.Arn
                      - 'index/*'
      - type: AMAZON_DYNAMODB
        name: BOOKS_DB
        config:
          tableName: !Ref BooksTable
          iamRoleStatements:
            - Effect: 'Allow'
              Action:
                - 'dynamodb:*'
              Resource:
                - Fn::GetAtt: [BooksTable, Arn]
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - Fn::Join:
                    - '/'
                    - - !GetAtt BooksTable.Arn
                      - 'index/*'
      - type: AMAZON_DYNAMODB
        name: AUTHORS_DB
        config:
          tableName: !Ref AuthorsTable
          iamRoleStatements:
            - Effect: 'Allow'
              Action:
                - 'dynamodb:*'
              Resource:
                - Fn::GetAtt: [AuthorsTable, Arn]
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - Fn::Join:
                    - '/'
                    - - !GetAtt AuthorsTable.Arn
                      - 'index/*'
      - type: AWS_LAMBDA
        name: UsersLambda
        config:
          functionName: usersFunction
      - type: AWS_LAMBDA
        name: BooksLambda
        config:
          functionName: booksFunction
      - type: AWS_LAMBDA
        name: AuthorsLambda
        config:
          functionName: authorsFunction

resources:
  Resources:
    # DynamoDB
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BooksTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
    AuthorsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: AuthorsTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: 'id'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'id'
            KeyType: 'HASH'
    AppSyncDynamodbServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
                
    